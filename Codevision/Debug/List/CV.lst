
AVRASM ver. 2.1.30  D:\My files\Semester 6\Microprocessor\Midterm Project-Esmaeili & Barati\12\Codevision\Debug\List\CV.asm Thu Jun 16 11:04:22 2022

                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 004b 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0078 	JMP  _timer0_ovf_isr
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x3:
00002a fdfe
00002b f7fb      	.DB  0xFE,0xFD,0xFB,0xF7
                 _0x4:
00002c 0001
00002d 0002
00002e 0003
00002f 0004      	.DB  0x1,0x0,0x2,0x0,0x3,0x0,0x4,0x0
000030 0005
000031 0006
000032 0007
000033 0008      	.DB  0x5,0x0,0x6,0x0,0x7,0x0,0x8,0x0
D:\My files\Semester 6\Microprocessor\Midterm Project-Esmaeili & Barati\12\Codevision\Debug\List\CV.asm(1121): warning: .cseg .db misalignment - padding zero byte
000034 0009      	.DB  0x9
                 _0x5:
000035 063f
000036 4f5b
000037 6d66
000038 077d      	.DB  0x3F,0x6,0x5B,0x4F,0x66,0x6D,0x7D,0x7
000039 677f
00003a 7c77
00003b 5e39
00003c 7179      	.DB  0x7F,0x67,0x77,0x7C,0x39,0x5E,0x79,0x71
                 _0x6:
D:\My files\Semester 6\Microprocessor\Midterm Project-Esmaeili & Barati\12\Codevision\Debug\List\CV.asm(1126): warning: .cseg .db misalignment - padding zero byte
00003d 0001      	.DB  0x1
                 
                 __GLOBAL_INI_TBL:
00003e 0004      	.DW  0x04
00003f 0260      	.DW  _reff
000040 0054      	.DW  _0x3*2
                 
000041 0011      	.DW  0x11
000042 0264      	.DW  _keys
000043 0058      	.DW  _0x4*2
                 
000044 0010      	.DW  0x10
000045 027a      	.DW  _seg
000046 006a      	.DW  _0x5*2
                 
000047 0001      	.DW  0x01
000048 029a      	.DW  _ref
000049 007a      	.DW  _0x6*2
                 
                 _0xFFFFFFFF:
00004a 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00004b 94f8      	CLI
00004c 27ee      	CLR  R30
00004d bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00004e e0f1      	LDI  R31,1
00004f bffb      	OUT  GICR,R31
000050 bfeb      	OUT  GICR,R30
000051 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000052 e08d      	LDI  R24,(14-2)+1
000053 e0a2      	LDI  R26,2
000054 27bb      	CLR  R27
                 __CLEAR_REG:
000055 93ed      	ST   X+,R30
000056 958a      	DEC  R24
000057 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000058 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000059 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00005a e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00005b 93ed      	ST   X+,R30
00005c 9701      	SBIW R24,1
00005d f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00005e e7ec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00005f e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000060 9185      	LPM  R24,Z+
000061 9195      	LPM  R25,Z+
000062 9700      	SBIW R24,0
000063 f061      	BREQ __GLOBAL_INI_END
000064 91a5      	LPM  R26,Z+
000065 91b5      	LPM  R27,Z+
000066 9005      	LPM  R0,Z+
000067 9015      	LPM  R1,Z+
000068 01bf      	MOVW R22,R30
000069 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00006a 9005      	LPM  R0,Z+
00006b 920d      	ST   X+,R0
00006c 9701      	SBIW R24,1
00006d f7e1      	BRNE __GLOBAL_INI_LOOP
00006e 01fb      	MOVW R30,R22
00006f cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000070 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000071 bfed      	OUT  SPL,R30
000072 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000073 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000074 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000075 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000076 940c 018d 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;
                 ;char reff[]={0xFE, 0xFD, 0xFB, 0xF7};
                 
                 	.DSEG
                 ;int keys[]={1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0};
                 ;char seg [] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x67, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71};
                 ;//char seg[] = {0xC0, 0xf9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90, 0x88, 0x83, 0xC6, 0xA1, 0x86, 0x8E};
                 ;unsigned long int temp, key_value;
                 ;unsigned long int i=0, inputcounter=0, ref = 0x01;
                 ;char val[4]={0, 0 , 0, 0} ;
                 ;
                 ;unsigned long int keypad();
                 ;unsigned long int key_pressed;
                 ;
                 ;// Timer 0 overflow interrupt service routine
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 0011 {
                 
                 	.CSEG
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
000078 936a      	ST   -Y,R22
000079 937a      	ST   -Y,R23
00007a 938a      	ST   -Y,R24
00007b 939a      	ST   -Y,R25
00007c 93aa      	ST   -Y,R26
00007d 93ba      	ST   -Y,R27
00007e 93ea      	ST   -Y,R30
00007f 93fa      	ST   -Y,R31
000080 b7ef      	IN   R30,SREG
000081 93ea      	ST   -Y,R30
                 ; 0000 0012 // Reinitialize Timer 0 value
                 ; 0000 0013     TCNT0=0xA9;
000082 eae9      	LDI  R30,LOW(169)
000083 bfe2      	OUT  0x32,R30
                 ; 0000 0014     PORTA = ~ref;
000084 91e0 029a 	LDS  R30,_ref
000086 95e0      	COM  R30
000087 bbeb      	OUT  0x1B,R30
                 ; 0000 0015     PORTB = seg[val[i]];
000088 91e0 0292 	LDS  R30,_i
00008a 91f0 0293 	LDS  R31,_i+1
00008c 56e2      	SUBI R30,LOW(-_val)
00008d 4ffd      	SBCI R31,HIGH(-_val)
00008e 81e0      	LD   R30,Z
00008f e0f0      	LDI  R31,0
000090 58e6      	SUBI R30,LOW(-_seg)
000091 4ffd      	SBCI R31,HIGH(-_seg)
000092 81e0      	LD   R30,Z
000093 bbe8      	OUT  0x18,R30
                 ; 0000 0016     ref = ref<<1;
000094 91e0 029a 	LDS  R30,_ref
000096 91f0 029b 	LDS  R31,_ref+1
000098 9160 029c 	LDS  R22,_ref+2
00009a 9170 029d 	LDS  R23,_ref+3
00009c 940e 01e5 	CALL __LSLD1
00009e d10f      	RCALL SUBOPT_0x0
                 ; 0000 0017     i++;
00009f e9a2      	LDI  R26,LOW(_i)
0000a0 e0b2      	LDI  R27,HIGH(_i)
0000a1 940e 0253 	CALL __GETD1P_INC
                +
0000a3 5fef     +SUBI R30 , LOW ( - 1 )
0000a4 4fff     +SBCI R31 , HIGH ( - 1 )
0000a5 4f6f     +SBCI R22 , BYTE3 ( - 1 )
0000a6 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__SUBD1N -1
0000a7 940e 0258 	CALL __PUTDP1_DEC
                 ; 0000 0018     if (i==4)
0000a9 91a0 0292 	LDS  R26,_i
0000ab 91b0 0293 	LDS  R27,_i+1
0000ad 9180 0294 	LDS  R24,_i+2
0000af 9190 0295 	LDS  R25,_i+3
                +
0000b1 30a4     +CPI R26 , LOW ( 0x4 )
0000b2 e0e0     +LDI R30 , HIGH ( 0x4 )
0000b3 07be     +CPC R27 , R30
0000b4 e0e0     +LDI R30 , BYTE3 ( 0x4 )
0000b5 078e     +CPC R24 , R30
0000b6 e0e0     +LDI R30 , BYTE4 ( 0x4 )
0000b7 079e     +CPC R25 , R30
                 	__CPD2N 0x4
0000b8 f471      	BRNE _0x7
                 ; 0000 0019     {
                 ; 0000 001A         i=0;
0000b9 e0e0      	LDI  R30,LOW(0)
0000ba 93e0 0292 	STS  _i,R30
0000bc 93e0 0293 	STS  _i+1,R30
0000be 93e0 0294 	STS  _i+2,R30
0000c0 93e0 0295 	STS  _i+3,R30
                 ; 0000 001B         ref = 0x01;
                +
0000c2 e0e1     +LDI R30 , LOW ( 0x1 )
0000c3 e0f0     +LDI R31 , HIGH ( 0x1 )
0000c4 e060     +LDI R22 , BYTE3 ( 0x1 )
0000c5 e070     +LDI R23 , BYTE4 ( 0x1 )
                 	__GETD1N 0x1
0000c6 d0e7      	RCALL SUBOPT_0x0
                 ; 0000 001C     }
                 ; 0000 001D }
                 _0x7:
0000c7 91e9      	LD   R30,Y+
0000c8 bfef      	OUT  SREG,R30
0000c9 91f9      	LD   R31,Y+
0000ca 91e9      	LD   R30,Y+
0000cb 91b9      	LD   R27,Y+
0000cc 91a9      	LD   R26,Y+
0000cd 9199      	LD   R25,Y+
0000ce 9189      	LD   R24,Y+
0000cf 9179      	LD   R23,Y+
0000d0 9169      	LD   R22,Y+
0000d1 9518      	RETI
                 ; .FEND
                 ;
                 ;void display(int value)
                 ; 0000 0020 {
                 _display:
                 ; .FSTART _display
                 ; 0000 0021     temp = value;
0000d2 93ba      	ST   -Y,R27
0000d3 93aa      	ST   -Y,R26
                 ;	value -> Y+0
0000d4 81e8      	LD   R30,Y
0000d5 81f9      	LDD  R31,Y+1
0000d6 940e 01ea 	CALL __CWD1
0000d8 d0de      	RCALL SUBOPT_0x1
                 ; 0000 0022     val[3] = temp%16; temp = temp/16;
                +
0000d9 93e0 02a1+STS _val + ( 3 ) , R30
                 	__PUTB1MN _val,3
0000db d0e7      	RCALL SUBOPT_0x2
                 ; 0000 0023     val[2] = temp%16; temp = temp/16;
                +
0000dc 93e0 02a0+STS _val + ( 2 ) , R30
                 	__PUTB1MN _val,2
0000de d0e4      	RCALL SUBOPT_0x2
                 ; 0000 0024     val[1] = temp%16; temp = temp/16;
                +
0000df 93e0 029f+STS _val + ( 1 ) , R30
                 	__PUTB1MN _val,1
0000e1 d0e1      	RCALL SUBOPT_0x2
                 ; 0000 0025     val[0] = temp%16;
0000e2 93e0 029e 	STS  _val,R30
                 ; 0000 0026 }
0000e4 9622      	ADIW R28,2
0000e5 9508      	RET
                 ; .FEND
                 ;
                 ;unsigned long int keypad()
                 ; 0000 0029 {
                 _keypad:
                 ; .FSTART _keypad
                 ; 0000 002A while(1)
                 _0x8:
                 ; 0000 002B {
                 ; 0000 002C     int row = 0, col = -1, pos=-1;
                 ; 0000 002D     for(row=0; row<4; row++)
0000e6 9726      	SBIW R28,6
0000e7 efef      	LDI  R30,LOW(255)
0000e8 83e8      	ST   Y,R30
0000e9 83e9      	STD  Y+1,R30
0000ea 83ea      	STD  Y+2,R30
0000eb 83eb      	STD  Y+3,R30
0000ec e0e0      	LDI  R30,LOW(0)
0000ed 83ec      	STD  Y+4,R30
0000ee 83ed      	STD  Y+5,R30
                 ;	row -> Y+4
                 ;	col -> Y+2
                 ;	pos -> Y+0
0000ef 83ec      	STD  Y+4,R30
0000f0 83ed      	STD  Y+4+1,R30
                 _0xC:
0000f1 81ac      	LDD  R26,Y+4
0000f2 81bd      	LDD  R27,Y+4+1
0000f3 9714      	SBIW R26,4
0000f4 f554      	BRGE _0xD
                 ; 0000 002E     {
                 ; 0000 002F         PORTD = reff[row];
0000f5 81ec      	LDD  R30,Y+4
0000f6 81fd      	LDD  R31,Y+4+1
0000f7 5ae0      	SUBI R30,LOW(-_reff)
0000f8 4ffd      	SBCI R31,HIGH(-_reff)
0000f9 81e0      	LD   R30,Z
0000fa bbe2      	OUT  0x12,R30
                 ; 0000 0030         delay_ms(5);
0000fb e0a5      	LDI  R26,LOW(5)
0000fc e0b0      	LDI  R27,0
0000fd 940e 01d2 	CALL _delay_ms
                 ; 0000 0031         if(PINC.0==0)
0000ff 9998      	SBIC 0x13,0
000100 c006      	RJMP _0xE
                 ; 0000 0032         {
                 ; 0000 0033             while(PINC.0==0);
                 _0xF:
000101 9b98      	SBIS 0x13,0
000102 cffe      	RJMP _0xF
                 ; 0000 0034             col=0;
000103 e0e0      	LDI  R30,LOW(0)
000104 83ea      	STD  Y+2,R30
000105 83eb      	STD  Y+2+1,R30
                 ; 0000 0035             break;
000106 c018      	RJMP _0xD
                 ; 0000 0036         }
                 ; 0000 0037         if(PINC.1==0)
                 _0xE:
000107 9999      	SBIC 0x13,1
000108 c007      	RJMP _0x12
                 ; 0000 0038         {
                 ; 0000 0039             while(PINC.1==0);
                 _0x13:
000109 9b99      	SBIS 0x13,1
00010a cffe      	RJMP _0x13
                 ; 0000 003A             col=1;
00010b e0e1      	LDI  R30,LOW(1)
00010c e0f0      	LDI  R31,HIGH(1)
00010d 83ea      	STD  Y+2,R30
00010e 83fb      	STD  Y+2+1,R31
                 ; 0000 003B             break;
00010f c00f      	RJMP _0xD
                 ; 0000 003C         }
                 ; 0000 003D         if(PINC.2==0)
                 _0x12:
000110 999a      	SBIC 0x13,2
000111 c007      	RJMP _0x16
                 ; 0000 003E         {
                 ; 0000 003F             while(PINC.2==0);
                 _0x17:
000112 9b9a      	SBIS 0x13,2
000113 cffe      	RJMP _0x17
                 ; 0000 0040             col=2;
000114 e0e2      	LDI  R30,LOW(2)
000115 e0f0      	LDI  R31,HIGH(2)
000116 83ea      	STD  Y+2,R30
000117 83fb      	STD  Y+2+1,R31
                 ; 0000 0041             break;
000118 c006      	RJMP _0xD
                 ; 0000 0042         }
                 ; 0000 0043     }
                 _0x16:
000119 81ec      	LDD  R30,Y+4
00011a 81fd      	LDD  R31,Y+4+1
00011b 9631      	ADIW R30,1
00011c 83ec      	STD  Y+4,R30
00011d 83fd      	STD  Y+4+1,R31
00011e cfd2      	RJMP _0xC
                 _0xD:
                 ; 0000 0044     if(col != -1)
00011f 81aa      	LDD  R26,Y+2
000120 81bb      	LDD  R27,Y+2+1
000121 3faf      	CPI  R26,LOW(0xFFFF)
000122 efef      	LDI  R30,HIGH(0xFFFF)
000123 07be      	CPC  R27,R30
000124 f409      	BRNE PC+2
000125 c065      	RJMP _0x1A
                 ; 0000 0045     {
                 ; 0000 0046         pos = row*3+col;
000126 81ec      	LDD  R30,Y+4
000127 81fd      	LDD  R31,Y+4+1
000128 e0a3      	LDI  R26,LOW(3)
000129 e0b0      	LDI  R27,HIGH(3)
00012a 940e 0217 	CALL __MULW12
00012c 81aa      	LDD  R26,Y+2
00012d 81bb      	LDD  R27,Y+2+1
00012e 0fea      	ADD  R30,R26
00012f 1ffb      	ADC  R31,R27
000130 83e8      	ST   Y,R30
000131 83f9      	STD  Y+1,R31
                 ; 0000 0047         inputcounter = ( inputcounter *10 ) + keys[pos];
000132 91e0 0296 	LDS  R30,_inputcounter
000134 91f0 0297 	LDS  R31,_inputcounter+1
000136 9160 0298 	LDS  R22,_inputcounter+2
000138 9170 0299 	LDS  R23,_inputcounter+3
                +
00013a e0aa     +LDI R26 , LOW ( 0xA )
00013b e0b0     +LDI R27 , HIGH ( 0xA )
00013c e080     +LDI R24 , BYTE3 ( 0xA )
00013d e090     +LDI R25 , BYTE4 ( 0xA )
                 	__GETD2N 0xA
00013e 940e 01f7 	CALL __MULD12U
000140 937f      	PUSH R23
000141 936f      	PUSH R22
000142 93ff      	PUSH R31
000143 93ef      	PUSH R30
000144 81e8      	LD   R30,Y
000145 81f9      	LDD  R31,Y+1
000146 e6a4      	LDI  R26,LOW(_keys)
000147 e0b2      	LDI  R27,HIGH(_keys)
000148 0fee      	LSL  R30
000149 1fff      	ROL  R31
00014a 0fae      	ADD  R26,R30
00014b 1fbf      	ADC  R27,R31
00014c 940e 024f 	CALL __GETW1P
00014e 91af      	POP  R26
00014f 91bf      	POP  R27
000150 918f      	POP  R24
000151 919f      	POP  R25
000152 940e 01ea 	CALL __CWD1
000154 940e 01dc 	CALL __ADDD12
000156 93e0 0296 	STS  _inputcounter,R30
000158 93f0 0297 	STS  _inputcounter+1,R31
00015a 9360 0298 	STS  _inputcounter+2,R22
00015c 9370 0299 	STS  _inputcounter+3,R23
                 ; 0000 0048         if(pos == 9){
00015e 81a8      	LD   R26,Y
00015f 81b9      	LDD  R27,Y+1
000160 9719      	SBIW R26,9
000161 f4f9      	BRNE _0x1B
                 ; 0000 0049             key_value = ( inputcounter / 10 ) ;
000162 91a0 0296 	LDS  R26,_inputcounter
000164 91b0 0297 	LDS  R27,_inputcounter+1
000166 9180 0298 	LDS  R24,_inputcounter+2
000168 9190 0299 	LDS  R25,_inputcounter+3
                +
00016a e0ea     +LDI R30 , LOW ( 0xA )
00016b e0f0     +LDI R31 , HIGH ( 0xA )
00016c e060     +LDI R22 , BYTE3 ( 0xA )
00016d e070     +LDI R23 , BYTE4 ( 0xA )
                 	__GETD1N 0xA
00016e 940e 021c 	CALL __DIVD21U
000170 93e0 028e 	STS  _key_value,R30
000172 93f0 028f 	STS  _key_value+1,R31
000174 9360 0290 	STS  _key_value+2,R22
000176 9370 0291 	STS  _key_value+3,R23
                 ; 0000 004A             inputcounter = 0;
000178 e0e0      	LDI  R30,LOW(0)
000179 93e0 0296 	STS  _inputcounter,R30
00017b 93e0 0297 	STS  _inputcounter+1,R30
00017d 93e0 0298 	STS  _inputcounter+2,R30
00017f 93e0 0299 	STS  _inputcounter+3,R30
                 ; 0000 004B         }
                 ; 0000 004C         return key_value;
                 _0x1B:
000181 91e0 028e 	LDS  R30,_key_value
000183 91f0 028f 	LDS  R31,_key_value+1
000185 9160 0290 	LDS  R22,_key_value+2
000187 9170 0291 	LDS  R23,_key_value+3
000189 9626      	ADIW R28,6
00018a 9508      	RET
                 ; 0000 004D     }
                 ; 0000 004E }
                 _0x1A:
00018b 9626      	ADIW R28,6
00018c cf59      	RJMP _0x8
                 ; 0000 004F }
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0052 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0053 DDRD = 0xFF;    //output
00018d efef      	LDI  R30,LOW(255)
00018e bbe1      	OUT  0x11,R30
                 ; 0000 0054 PORTC = 0xFF;
00018f bbe5      	OUT  0x15,R30
                 ; 0000 0055 DDRC = 0x00;    //input
000190 e0e0      	LDI  R30,LOW(0)
000191 bbe4      	OUT  0x14,R30
                 ; 0000 0056 
                 ; 0000 0057 DDRA = 0xFF;    //output
000192 efef      	LDI  R30,LOW(255)
000193 bbea      	OUT  0x1A,R30
                 ; 0000 0058 DDRB= 0xFF;
000194 bbe7      	OUT  0x17,R30
                 ; 0000 0059 
                 ; 0000 005A // Timer/Counter 0 initialization
                 ; 0000 005B // Clock source: System Clock
                 ; 0000 005C // Clock value: 125.000 kHz
                 ; 0000 005D // Mode: Normal top=0xFF
                 ; 0000 005E // OC0 output: Disconnected
                 ; 0000 005F // Timer Period: 0.696 ms
                 ; 0000 0060 
                 ; 0000 0061 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (1<<CS01) | (1<<CS00);
000195 e0e3      	LDI  R30,LOW(3)
000196 bfe3      	OUT  0x33,R30
                 ; 0000 0062 TCNT0=0xA9;
000197 eae9      	LDI  R30,LOW(169)
000198 bfe2      	OUT  0x32,R30
                 ; 0000 0063 OCR0=0x00;
000199 e0e0      	LDI  R30,LOW(0)
00019a bfec      	OUT  0x3C,R30
                 ; 0000 0064 
                 ; 0000 0065 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0066 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
00019b e0e1      	LDI  R30,LOW(1)
00019c bfe9      	OUT  0x39,R30
                 ; 0000 0067 
                 ; 0000 0068 // Global enable interrupts
                 ; 0000 0069 #asm("sei")
00019d 9478      	sei
                 ; 0000 006A //
                 ; 0000 006B while (1)  {
                 _0x1C:
                 ; 0000 006C 
                 ; 0000 006D     key_pressed = keypad();
00019e df47      	RCALL _keypad
00019f 93e0 02a2 	STS  _key_pressed,R30
0001a1 93f0 02a3 	STS  _key_pressed+1,R31
0001a3 9360 02a4 	STS  _key_pressed+2,R22
0001a5 9370 02a5 	STS  _key_pressed+3,R23
                 ; 0000 006E     display(key_pressed);
0001a7 91a0 02a2 	LDS  R26,_key_pressed
0001a9 91b0 02a3 	LDS  R27,_key_pressed+1
0001ab df26      	RCALL _display
                 ; 0000 006F }
0001ac cff1      	RJMP _0x1C
                 ; 0000 0070 }
                 _0x1F:
0001ad cfff      	RJMP _0x1F
                 ; .FEND
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 
                 	.DSEG
                 _reff:
000260           	.BYTE 0x4
                 _keys:
000264           	.BYTE 0x16
                 _seg:
00027a           	.BYTE 0x10
                 _temp:
00028a           	.BYTE 0x4
                 _key_value:
00028e           	.BYTE 0x4
                 _i:
000292           	.BYTE 0x4
                 _inputcounter:
000296           	.BYTE 0x4
                 _ref:
00029a           	.BYTE 0x4
                 _val:
00029e           	.BYTE 0x4
                 _key_pressed:
0002a2           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
0001ae 93e0 029a 	STS  _ref,R30
0001b0 93f0 029b 	STS  _ref+1,R31
0001b2 9360 029c 	STS  _ref+2,R22
0001b4 9370 029d 	STS  _ref+3,R23
0001b6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:24 WORDS
                 SUBOPT_0x1:
0001b7 93e0 028a 	STS  _temp,R30
0001b9 93f0 028b 	STS  _temp+1,R31
0001bb 9360 028c 	STS  _temp+2,R22
0001bd 9370 028d 	STS  _temp+3,R23
0001bf 91e0 028a 	LDS  R30,_temp
0001c1 70ef      	ANDI R30,LOW(0xF)
0001c2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:25 WORDS
                 SUBOPT_0x2:
0001c3 91a0 028a 	LDS  R26,_temp
0001c5 91b0 028b 	LDS  R27,_temp+1
0001c7 9180 028c 	LDS  R24,_temp+2
0001c9 9190 028d 	LDS  R25,_temp+3
                +
0001cb e1e0     +LDI R30 , LOW ( 0x10 )
0001cc e0f0     +LDI R31 , HIGH ( 0x10 )
0001cd e060     +LDI R22 , BYTE3 ( 0x10 )
0001ce e070     +LDI R23 , BYTE4 ( 0x10 )
                 	__GETD1N 0x10
0001cf 940e 021c 	CALL __DIVD21U
0001d1 cfe5      	RJMP SUBOPT_0x1
                 
                 
                 	.CSEG
                 _delay_ms:
0001d2 9610      	adiw r26,0
0001d3 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0001d4 ed80     +LDI R24 , LOW ( 0x7D0 )
0001d5 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0001d6 9701     +SBIW R24 , 1
0001d7 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0001d8 95a8      	wdr
0001d9 9711      	sbiw r26,1
0001da f7c9      	brne __delay_ms0
                 __delay_ms1:
0001db 9508      	ret
                 
                 __ADDD12:
0001dc 0fea      	ADD  R30,R26
0001dd 1ffb      	ADC  R31,R27
0001de 1f68      	ADC  R22,R24
0001df 1f79      	ADC  R23,R25
0001e0 9508      	RET
                 
                 __ANEGW1:
0001e1 95f1      	NEG  R31
0001e2 95e1      	NEG  R30
0001e3 40f0      	SBCI R31,0
0001e4 9508      	RET
                 
                 __LSLD1:
0001e5 0fee      	LSL  R30
0001e6 1fff      	ROL  R31
0001e7 1f66      	ROL  R22
0001e8 1f77      	ROL  R23
0001e9 9508      	RET
                 
                 __CWD1:
0001ea 2f6f      	MOV  R22,R31
0001eb 0f66      	ADD  R22,R22
0001ec 0b66      	SBC  R22,R22
0001ed 2f76      	MOV  R23,R22
0001ee 9508      	RET
                 
                 __MULW12U:
0001ef 9ffa      	MUL  R31,R26
0001f0 2df0      	MOV  R31,R0
0001f1 9feb      	MUL  R30,R27
0001f2 0df0      	ADD  R31,R0
0001f3 9fea      	MUL  R30,R26
0001f4 2de0      	MOV  R30,R0
0001f5 0df1      	ADD  R31,R1
0001f6 9508      	RET
                 
                 __MULD12U:
0001f7 9f7a      	MUL  R23,R26
0001f8 2d70      	MOV  R23,R0
0001f9 9f6b      	MUL  R22,R27
0001fa 0d70      	ADD  R23,R0
0001fb 9ff8      	MUL  R31,R24
0001fc 0d70      	ADD  R23,R0
0001fd 9fe9      	MUL  R30,R25
0001fe 0d70      	ADD  R23,R0
0001ff 9f6a      	MUL  R22,R26
000200 2d60      	MOV  R22,R0
000201 0d71      	ADD  R23,R1
000202 9ffb      	MUL  R31,R27
000203 0d60      	ADD  R22,R0
000204 1d71      	ADC  R23,R1
000205 9fe8      	MUL  R30,R24
000206 0d60      	ADD  R22,R0
000207 1d71      	ADC  R23,R1
000208 2788      	CLR  R24
000209 9ffa      	MUL  R31,R26
00020a 2df0      	MOV  R31,R0
00020b 0d61      	ADD  R22,R1
00020c 1f78      	ADC  R23,R24
00020d 9feb      	MUL  R30,R27
00020e 0df0      	ADD  R31,R0
00020f 1d61      	ADC  R22,R1
000210 1f78      	ADC  R23,R24
000211 9fea      	MUL  R30,R26
000212 2de0      	MOV  R30,R0
000213 0df1      	ADD  R31,R1
000214 1f68      	ADC  R22,R24
000215 1f78      	ADC  R23,R24
000216 9508      	RET
                 
                 __MULW12:
000217 d029      	RCALL __CHKSIGNW
000218 dfd6      	RCALL __MULW12U
000219 f40e      	BRTC __MULW121
00021a dfc6      	RCALL __ANEGW1
                 __MULW121:
00021b 9508      	RET
                 
                 __DIVD21U:
00021c 933f      	PUSH R19
00021d 934f      	PUSH R20
00021e 935f      	PUSH R21
00021f 2400      	CLR  R0
000220 2411      	CLR  R1
000221 2744      	CLR  R20
000222 2755      	CLR  R21
000223 e230      	LDI  R19,32
                 __DIVD21U1:
000224 0faa      	LSL  R26
000225 1fbb      	ROL  R27
000226 1f88      	ROL  R24
000227 1f99      	ROL  R25
000228 1c00      	ROL  R0
000229 1c11      	ROL  R1
00022a 1f44      	ROL  R20
00022b 1f55      	ROL  R21
00022c 1a0e      	SUB  R0,R30
00022d 0a1f      	SBC  R1,R31
00022e 0b46      	SBC  R20,R22
00022f 0b57      	SBC  R21,R23
000230 f428      	BRCC __DIVD21U2
000231 0e0e      	ADD  R0,R30
000232 1e1f      	ADC  R1,R31
000233 1f46      	ADC  R20,R22
000234 1f57      	ADC  R21,R23
000235 c001      	RJMP __DIVD21U3
                 __DIVD21U2:
000236 60a1      	SBR  R26,1
                 __DIVD21U3:
000237 953a      	DEC  R19
000238 f759      	BRNE __DIVD21U1
000239 01fd      	MOVW R30,R26
00023a 01bc      	MOVW R22,R24
00023b 01d0      	MOVW R26,R0
00023c 01ca      	MOVW R24,R20
00023d 915f      	POP  R21
00023e 914f      	POP  R20
00023f 913f      	POP  R19
000240 9508      	RET
                 
                 __CHKSIGNW:
000241 94e8      	CLT
000242 fff7      	SBRS R31,7
000243 c002      	RJMP __CHKSW1
000244 df9c      	RCALL __ANEGW1
000245 9468      	SET
                 __CHKSW1:
000246 ffb7      	SBRS R27,7
000247 c006      	RJMP __CHKSW2
000248 95a0      	COM  R26
000249 95b0      	COM  R27
00024a 9611      	ADIW R26,1
00024b f800      	BLD  R0,0
00024c 9403      	INC  R0
00024d fa00      	BST  R0,0
                 __CHKSW2:
00024e 9508      	RET
                 
                 __GETW1P:
00024f 91ed      	LD   R30,X+
000250 91fc      	LD   R31,X
000251 9711      	SBIW R26,1
000252 9508      	RET
                 
                 __GETD1P_INC:
000253 91ed      	LD   R30,X+
000254 91fd      	LD   R31,X+
000255 916d      	LD   R22,X+
000256 917d      	LD   R23,X+
000257 9508      	RET
                 
                 __PUTDP1_DEC:
000258 937e      	ST   -X,R23
000259 936e      	ST   -X,R22
00025a 93fe      	ST   -X,R31
00025b 93ee      	ST   -X,R30
00025c 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  25 r1 :  12 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:   0 r18:   0 r19:   4 r20:   7 r21:   6 r22:  38 r23:  33 
r24:  28 r25:  14 r26:  42 r27:  31 r28:   5 r29:   1 r30: 132 r31:  58 
x  :  13 y  :  56 z  :  10 
Registers used: 18 out of 35 (51.4%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  15 add   :  16 
adiw  :   6 and   :   0 andi  :   1 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   2 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :   9 brpl  :   0 brsh  :   0 brtc  :   1 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :  12 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   7 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   3 
cp    :   0 cpc   :   4 cpi   :   2 cpse  :   0 dec   :   2 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   1 inc   :   1 jmp   :  22 ld    :  21 ldd   :  15 ldi   :  61 
lds   :  30 lpm   :   7 lsl   :   3 lsr   :   0 mov   :   8 movw  :   7 
mul   :  13 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   0 
ori   :   0 out   :  20 pop   :   7 push  :   7 rcall :  12 ret   :  17 
reti  :   1 rjmp  :  19 rol   :  11 ror   :   0 sbc   :   4 sbci  :   7 
sbi   :   0 sbic  :   3 sbis  :   3 sbiw  :   9 sbr   :   1 sbrc  :   0 
sbrs  :   2 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  20 std   :  16 sts   :  32 sub   :   1 subi  :   4 swap  :   0 
tst   :   0 wdr   :   1 
Instructions used: 55 out of 116 (47.4%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0004ba   1144     66   1210   32768   3.7%
[.dseg] 0x000060 0x0002a6      0     70     70    2048   3.4%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 2 warnings
